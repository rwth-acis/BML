Bot(host="localhost", port=8080) {

    OpenAPI petStore(url="https://petstore3.swagger.io/api/v3/openapi.json")

    Rasa rasa(url="rasa.com/rasaToken:8000") // Automatically used by messengers

    Telegram telegram(token="myTelegramToken", botName="TestBMLBot")

    Slack slack(token="mySlackToken")

    Map subscribedUsers()

    @UserSentMessage // Uses all messenger components
    collectPetId(context) {
        if context.intent == "id" {
            pet = petStore.get(path="/pet/{petId}", petId=number(string=context.entity))

            test = 2

            if pet.code == 200 { // The code field is provided by the transpiler
                // If not specified otherwise, send back to user that message was received from
                // send uses all "registered" messengers (see @UserSentMessage)
                send(text="Thank you, I'll keep you posted about " + pet.name + " with id " + string(number=pet.id))
                subscribedUsers.add(key=context.user, value=pet.id)
            } else if pet.code == 400 {
                send(text="I'm sorry, it seems like " + context.entity + " is an invalid id. Please make sure that you are providing a valid number.")
            } else { // code == 404
                send(text="I'm sorry, it seems there is no pet with id " + context.entity)
            }
        } else {
            send(text="I'm sorry, it seems like you didn't provide a pet id. The id has to be a positive integer.")
        }
    }

    @UserStartedChat
    welcomeUser(context) {
        // Only sends to telegram, as specified by @TelegramUserStartedChat
        // Implicitly sends to user that started chat
        send(text="Hi there!")
    }

    @Routine(rate="1h")
    reportPetStatus(context) {
        forEach user, petId in subscribedUsers {
            pet = petStore.get(path="/pet/{petId}", petId=petId)
            msg = pet.name + " is **" + pet.status + "**!"
            send(receiver=user, text=msg)
        }
    }
}
