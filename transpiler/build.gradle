plugins {
    id 'java'
}

group 'i5.bml'
version '0.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencies {
    // Parsing tool for java files
    implementation 'com.github.javaparser:javaparser-core:3.24.8'

    // Used for types & scopes provided by ANTLR
    implementation 'org.antlr:symtab:1.0.8'

    // Required to implement Telegram bot
    implementation 'org.telegram:telegrambots:6.3.0'

    // Required to implement Slack bot
    implementation 'com.slack.api:bolt-socket-mode:1.27.2'

    // Logging
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.19.0'
    implementation 'org.slf4j:slf4j-api:2.0.6'
    implementation 'org.slf4j:slf4j-simple:2.0.6'

    // Transpiler invokes parser which uses LSP type of diagnostics
    implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.19.0'

    // CLI input parsing
    implementation 'commons-cli:commons-cli:1.5.0'

    // Rasa API communication (via REST API with YAML and JSON)
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation 'io.gsonfire:gson-fire:1.8.5'

    // Code generation
    implementation 'org.antlr:ST4:4.3.4'
    implementation 'org.gradle:gradle-tooling-api:7.4.2'

    // Utils
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.reflections:reflections:0.10.2'

    // OpenAI API Support
    implementation 'com.theokanning.openai-gpt3-java:client:0.8.1'

    // Invoked by transpiler before actual code generation to guarantee code "correctness"
    implementation project(':parser')
}

compileJava {
    copy {
        from "$projectDir/src/main/java/i5/bml/transpiler/bot"
        into "$projectDir/src/main/resources/bot"
    }
}

jar {
    dependsOn(':parser:jar')

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "bmlc.jar"

    manifest {
        attributes 'Main-Class': 'i5.bml.transpiler.TranspilerMain'
    }

    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

test {
    ignoreFailures = true

    useJUnitPlatform()
}

abstract class ExecutableJarTask extends DefaultTask {
    // This custom task will prepend the content of a
    // bash launch script at the beginning of a jar,
    // and make it executable (chmod +x)

    @InputFiles
    ConfigurableFileTree originalJars = project.fileTree("${project.buildDir}/libs") { include("*.jar") }

    @OutputDirectory
    File outputDir = new File("${project.rootDir}")

    @InputFile
    File launchScript = new File("${project.rootDir}/launch.sh")

    @TaskAction
    void createExecutableJars() {
        originalJars.forEach { jar ->
            def jarName = "$outputDir/${jar.name}";
            def jarFile = new File(jarName.subSequence(0, jarName.length() - 4) as String)
            jarFile.withOutputStream { out ->
                out.write(launchScript.bytes)
                out.write(jar.bytes)
            }
            jarFile.setExecutable(true)
            println("created executable: $jarFile.path")
        }
    }
}


tasks.register('executableJar', ExecutableJarTask) {
    dependsOn("jar")
}